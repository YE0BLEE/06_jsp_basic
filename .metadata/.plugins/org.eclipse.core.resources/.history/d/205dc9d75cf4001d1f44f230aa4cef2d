package com.lec.dbcp;

import java.sql.Connection;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnectionFactory;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

public class DBCPInit extends HttpServlet {

	
	@Override
	public void init() throws ServletException {
		loadJDBCDriver();
		initConnectionPool();
	}

	
	private void loadJDBCDriver() {
		// Class.forName("org.mariadb..."); 대신
		// web.xml에 정의하여 로딩
		String driverClass = getInitParameter("jdbcDriver");
		
		try {
			Class.forName(driverClass);
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("JDBC Driver Loaded Failure" + " CHECK web.xml init parameter jdbcDriver");
		}
	}
	
	
	private void initConnectionPool() {

		String url = getInitParameter("url");
		String usr = getInitParameter("user");
		String pwd = getInitParameter("pass");
	
		
		// Connection Pool 정의를 위해 Library 등록(WEB-INF/lib)
		// commons-dbcp2-2.9.0.jar
		// common-pool2-2.11.1.jar
		// commons-logging-1.2.jar
		
		// A. Connection Factory 생성
		// 1. 커넥션풀이 새로운 커넥션을 생성할 때 사용하는 커넥션팩토리를 생성
		ConnectionFactory cf = new DriverManagerConnectionFactory(url, usr, pwd);
		
		// 2. PoolableConnection 생성 - 팩토리생성 DBCP는 커넥션풀에 커넥션을 보관할 때
		//                              PoolableConnection을 사용한다. 이 클래스는 내부적으로 커넥션을
		//                              보관하고 있으며 커넥션을 관리하는 데 필요한 기능을 제공한다.
		//                              예를 들어, connection을 close하면 connection을 메모리에서 삭제하는
		//                              것이 아니라 Connection Pool에 Connection을 반환한다.
		PoolableConnectionFactory pcf = new PoolableConnectionFactory(cf, null);
		
		// 3. Connection이 유효한지를 검사하기 위한 SQL을 지정
		// Connection 유효 여부 검사 : mariadb, mysql - select 1;
		//                           :         oracle - select * from dual;
		pcf.setValidationQuery("select 1");
		
		// B. Connection Pool 설정 정보
		// 1. 설정정보를 관리할 객체 생성
		GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();
		
		// 2. 커넥션 검사 주기
		poolConfig.setTimeBetweenEvictionRunsMillis(1000l * 60l * 5l);  // 검사 주기 5분
		
		// 3. 풀에 보관된 커넥션의 유효 여부를 검사할지 설정
		poolConfig.setTestWhileIdle(true);
		
		// 4.
		// 5.
		
		// C. Connection Pool 설정 정보를 이용해 Connection Pool 생성
		// 1.
		// 2. 
		
		// D. Connection Pool 에 제공할 JDBC드라이버 등록
		
	}

	
}










