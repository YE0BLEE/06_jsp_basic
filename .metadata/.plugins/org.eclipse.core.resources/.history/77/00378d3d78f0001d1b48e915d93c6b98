<%@page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!--  
	session객체 사용
	
	웹브라우저에 정보를 보관할 때 cookie를 사용한다면 session은 웹서버(웹컨테이너)에
	정보를 보관할 때 사용한다. session은 오직 웹서버에만 생성된다.
	
	웹컨테이너는 기본적으로 한 웹브라우저마다 한 개의 session을 생성한다.
	웹브라우저마다 session이 별도로 존재하기 때문에 
	session은 웹브라우저와 관련된 정보를 저장하는데 주로 사용한다.
	즉, cookie가 클라이언트측의 데이터 저장소라면 session은 서버측의 저장소이다.
	
	session을 생성하면 session기본객체를 이용해서 session을 사용할 수 있게 된다.
	jsp에서는 session을 생성하려면 page디렉티브의 session속성을 true(기본값)로 지정하면 된다.
	
	A. session 기본객체
	
	  session객체는 request객체와 마찬가지로 속성을 제공하고, setAttribute, getAttribute메서드를
	  사용하여 session의 속성값을 저장하거나 읽을 수 있다. 다만, session객체는 session만의 고유 정보를
	  제어할 수 있는 메서드가 추가로 제공된다.
	  
	  1. getId() : session id (session별 고유 id값)를 리턴
	  2. getCreateTime() : session이 생성된 시간을 리턴
	  3. getLastAccessedTime() : 웹브라우저가 session에 마지막으로 접근한 시간을 리턴
	
	B. session 객체의 속성
	
	  한 번 생성된 session은 지정한 유효시간 동안 유지가 되기 때문에 웹애플리케이션을 실행하는 동안
	  지속적으로 사용해야 하는 데이터를 저장하는 저장소로 session을 사용한다.
	  request객체는 하나의 요청만 처리하는데 사용한다면 session객체는 웹브라우저의 여러 요청을 
	  처리하는 jsp페이지에서 공유된다. 로그인한 회원정보 등 웹브라우저와 일대일로 관련된 값을 저장할 때는
	  cookie 보다 session을 사용하는 것이 좋다.
	
	C. cookie vs session
	
-->
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">	
  	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
	<title>Insert title here</title>
</head>
<body>

</body>
</html>