/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-05-17 03:11:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp03_005fdbcp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;

public final class jsp01_005flistMember_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	커넥션풀: Connection Pool\r\n");
      out.write("	\r\n");
      out.write("	커넥션풀, 데이터베이스와 커넥션을 사전에 만들어 pool에 저장해 두고\r\n");
      out.write("	필요할 때 마다 꺼내서 사용한 후 다시 pool에 반환하는 기법을 말한다.\r\n");
      out.write("	\r\n");
      out.write("	커넥션풀의 특징은\r\n");
      out.write("	\r\n");
      out.write("	1. 사전에 풀에 Connection이 생성되어 있기 때문에 커넥션을 생성하는 데 필요한 시간을 줄일 수 있다.\r\n");
      out.write("	2. Connection을 재사용하기 때문에 생성되는 Connection갯수를 일정하게 관리할 수 있다.\r\n");
      out.write("	3. Connection Pool을 사용하게 되면 웹애플리케이션의 성능과 처리성능이 향상된다.\r\n");
      out.write("	   때문에 대부분의 웹애플리케이션이 커넥션풀을 기본적으로 사용하고 있다.\r\n");
      out.write("	   \r\n");
      out.write("	커넥션풀을 사용하는 방법\r\n");
      out.write("	\r\n");
      out.write("	1. DBCP 관련 jar파일과 JDBC 관련 jar파일을 설치\r\n");
      out.write("	  a. Commons DBCP API (commons-dbcp2-2.9.0.jar, common-pool2-2.11.1.jar, commons-logging-1.2.jar)\r\n");
      out.write("	     maven repository에서 다운\r\n");
      out.write("	  b. WEB-INF/lib에 복사 (자동으로 add build path)\r\n");
      out.write("	  \r\n");
      out.write("	2. Connection Pool을 초기화\r\n");
      out.write("	  a. DB Initial 클래스 작성 (DBCPInit.java 서블릿프로그램)\r\n");
      out.write("	  b. web.xml에 Connection Pool 관련 태그 설정 (myPoolName)\r\n");
      out.write("	  \r\n");
      out.write("	3. Connection Pool에서 Connection을 사용\r\n");
      out.write("	  a. jdbc:apache:commons:dbcp:커넥션이름\r\n");
      out.write("	  b. 커넥션이름 = myPoolName\r\n");
      out.write("-->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1\">	\r\n");
      out.write("  	<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("  	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("	<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\" align=\"center\">\r\n");
      out.write("		<h1>Member Registration</h1>\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("			<table class=\"table table-bordered table-dark table-hover\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>ID</th>\r\n");
      out.write("					<th>PW</th>\r\n");
      out.write("					<th>NAME</th>\r\n");
      out.write("					<th>EMAIL</th>\r\n");
      out.write("					<th>DELETE</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");

				Connection conn = null;
				Statement stmt = null;
				ResultSet rs = null;
				
				String drv = "jdbc:apache:commons:dbcp:myPoolName";
				String sql = "select * from member order by id desc";
				
				try {
					conn = DriverManager.getConnection(drv);
					stmt = conn.createStatement();
					rs = stmt.executeQuery(sql);
					
					while(rs.next()) {
						String id = rs.getString("id");
						String pw = rs.getString("password");
						String name = rs.getString("name");
						String email = rs.getString("email");	
				
      out.write("\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td><a href=\"jsp02_updateForm.jsp?id=");
      out.print( id );
      out.write('"');
      out.write('>');
      out.print( id );
      out.write("</a></td>\r\n");
      out.write("						<td>");
      out.print( pw );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print( name );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print( email );
      out.write("</td>\r\n");
      out.write("						<td><a href=\"jsp04_deleteForm.jsp?id=");
      out.print( id );
      out.write("\" class=\"btn btn-danger\">DELETE</a></td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				\r\n");
      out.write("				");

					}
					
				} catch(Exception e) {
					out.println("<h3 class='bg-danger text-white'>DB connection failed</h3> <br />"
							+ e.getMessage());
				} finally {
					try {
						if(rs != null) rs.close();
						if(stmt != null) stmt.close();
						if(conn != null) conn.close();
					} catch(Exception e) {
						// dummy
					}
				}
				
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("			</table>\r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("		<a href=\"/jsp02_database/jsp01_connect/jsp03_insertForm.jsp\" class=\"btn btn-primary mt-sm-2\">REGIST</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
